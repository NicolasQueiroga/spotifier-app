/* eslint-disable @next/next/no-img-element */
import { useSession } from "next-auth/client";
import Layout from "../../components/layout";
import Head from "next/head";
import Footer from "../../components/footer";
import Link from "next/link";
import styles from "../../styles/pages/user/Profile.module.css";
import { getSpotifyClient } from "../../sevices/spotify";
import { useState, useEffect } from "react";
import { api } from "../../sevices/api";

const Profile = () => {
  const [session, loading] = useSession();

  const [user, setUser] = useState<UserProps>();
  useEffect(() => {
    async function loadUser() {
      try {
        const spotify = await getSpotifyClient();
        const response = await spotify.get("me");

        console.log(response.data);
        setUser(response.data);
      } catch (error) {
        console.log(error);
      }
    }
    loadUser();
  }, []);

  const [range, setRange] = useState('short_term');
  const [topArtists, setTopArtists] = useState<Array<ArtistProps>>();
  useEffect(() => {
    async function loadTopArtists(range: string) {
      try {
        const spotify = await getSpotifyClient();
        const response = await spotify.get(
          `me/top/artists?time_range=${range}&limit=10`
        );

        console.log(response.data.items);
        setTopArtists(response.data.items);
      } catch (error) {
        console.log(error);
      }
    }
    loadTopArtists(range);
  }, [range]);

  const [topTracks, setTopTracks] = useState<Array<TrackProps>>();
  useEffect(() => {
    async function loadTopTracks(range: string) {
      try {
        const spotify = await getSpotifyClient();
        const response = await spotify.get(
          `me/top/tracks?time_range=${range}&limit=10`
        );

        console.log(response.data.items);
        setTopTracks(response.data.items);
      } catch (error) {
        console.log(error);
      }
    }
    loadTopTracks(range);
  }, [range]);

  if (loading) return <p className={styles.loading}>loading...</p>;
  if (!session)
    return (
      <Layout>
        <div className={styles.noSession}>
          <h1>No Session!</h1>
        </div>
      </Layout>
    );
  if (!loading && session)
    return (
      <Layout>
        <Head>
          <title>Spotifier</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {session && (
          <>
            <div className={styles.pageContainer}>
              <div className={styles.welcome}>
                <p className={styles.welcomeText}>
                  Welcome, <strong>{user?.display_name}</strong>!
                </p>
                <div className={styles.selContainer}>
                  <label htmlFor="time_range">Select Time Range</label>
                  <select className={styles.sel} name="time_range" id="time_range" onChange={(e) => { setRange(e.target.value); }}>
                    <option value="short_term">Short Term</option>
                    <option value="medium_term">Medium Term</option>
                    <option value="long_term">Long Term</option>
                  </select>
                </div>
              </div>
              <div className={styles.contentContainer}>
                <div className={styles.artistsContainer}>
                  <p className={styles.title}>Top 10 Artists</p>
                  <div className={styles.artistsContent}>
                    {topArtists?.map((a) => (
                      <div className={styles.artist} key={a.id}>
                        <img
                          className={styles.img}
                          src={a.images[0].url}
                          alt="Picture of the artist"
                        />
                        <Link href={a.external_urls.spotify}>
                          <a>
                            <p className={styles.name}>{a.name}</p>
                          </a>
                        </Link>
                      </div>
                    ))}
                  </div>
                </div>
                <div className={styles.tracksContainer}>
                  <p className={styles.title}>Top 10 Tracks</p>
                  <div className={styles.tracksContent}>
                    {topTracks?.map((a) => (
                      <div className={styles.track} key={a.id}>
                        <img
                          className={styles.img}
                          src={a.album.images[0].url}
                          alt="Picture of the album"
                        />
                        <Link href={a.external_urls.spotify}>
                          <a>
                            <p className={styles.name}>{a.name}</p>
                          </a>
                        </Link>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              <Footer />
            </div>
          </>
        )}
      </Layout>
    );
};

export default Profile;
